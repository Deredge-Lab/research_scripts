#!/bin/bash

#$ -S /bin/bash
#$ -cwd
#$ -V
#$ -o progress.out"
#$ -j y
#$ -N system_prod
#$ -l h_data=1500M,h_rt=99:59:59,gpu=1
#$ -pe smp 8
#$ -R y

# Log username and job info
echo $HOSTNAME $JOB_ID `date`

# Copy files from working dir to tmp dir on GPU node
cwd=`pwd`
cd /tmp
mkdir -p username
cd username
mkdir job_${JOB_ID}
cd job_${JOB_ID}
rsync -avz ${cwd}/ /tmp/username/job_${JOB_ID}/

# Activate environment where openmm is installed 
python=/opt/openmm/latest/bin/python

# Default prefixes generated by CHARMM-GUI for running in openMM w/ CHARMM36m FF
init=step3_input
equi_prefix=step4_equilibration
prod_prefix=step5_production
prod_step=step5

# Equilibration
$python -u openmm_run.py -i ${equil_prefix}.inp -t toppar.str -p ${init}.psf -c ${init}.crd -b sysinfo.dat -orst ${equil_prefix}.rst -odcd ${equil_prefix}.dcd > ${equil_prefix}.out

# Set number of production stages to iterate through
# Total sim time (ns) = [(nstep*dt*cntmax)/1000] 
cnt=1
cntmax=10

# Production
while [ ${cnt} -le ${cntmax} ]
do
    pcnt=$((cnt-1))
    istep=${prod_step}_${cnt}
    pstep=${prod_step}_${pcnt}

    if [ ${cnt} -eq 1 ] 
       then pstep=${equil_prefix}
    fi
    $python -u openmm_run.py -i ${prod_prefix}.inp -t toppar.str -p ${init}.psf -c ${init}.crd -irst ${pstep}.rst -orst ${istep}.rst -odcd ${istep}.dcd > ${istep}.out
    cnt=$((cnt+1))
done

# Copy files tmp dir to working dir
# Remove files from GPU node
rsync -avz /tmp/username/job_${JOB_ID}/ ${cwd}/
cd ..
rm -rf job_${JOBID}
cd ${cwd}
